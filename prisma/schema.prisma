generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  nif          String?
  image        String?
  authProvider String?
  provider_id  String?
  role         Role       @default(STANDARD)
  votes        Vote[]
  songVotes    SongVote[]
  clubsOwned   Club[]     @relation("OwnerClubs")
}

model Club {
  id              Int        @id @default(autoincrement())
  name            String?
  amenity         String
  addrCity        String?
  addrStreet      String?
  addrHouseNumber String?
  addrpostcode    String?
  latitude        Float
  longitude       Float
  website         String?
  instagram       String?
  facebook        String?
  phone           String?
  email           String?
  nodeId          String
  rating          Float?
  information     String?
  playlists       Playlist[]
  votes           Vote[]
  ownerId         Int?
  owner           User?      @relation("OwnerClubs", fields: [ownerId], references: [id])
}

model Vote {
  id     Int      @id @default(autoincrement())
  userId Int
  clubId Int
  vote   Int
  week   DateTime
  club   Club     @relation(fields: [clubId], references: [id])
  user   User     @relation(fields: [userId], references: [id])
}

model Song {
  id        Int        @id @default(autoincrement())
  title     String
  artist    String
  playlists Playlist[]
  songVotes SongVote[]
}

model Playlist {
  id     Int  @id @default(autoincrement())
  clubId Int
  songId Int
  club   Club @relation(fields: [clubId], references: [id])
  song   Song @relation(fields: [songId], references: [id])
}

model SongVote {
  id     Int      @id @default(autoincrement())
  userId Int
  songId Int
  vote   Int
  week   DateTime
  song   Song     @relation(fields: [songId], references: [id])
  user   User     @relation(fields: [userId], references: [id])
}

enum Role {
  STANDARD
  OWNER
  ADMIN
}
